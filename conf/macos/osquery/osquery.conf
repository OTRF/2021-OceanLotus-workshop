{
  "options": {
    "logger_snapshot_event_type": "true",
    "schedule_splay_percent": 10
  },
  "platform": "darwin",
  "schedule": {
    "authorized_keys": {
      "query": "SELECT * FROM users CROSS JOIN authorized_keys USING (uid);",
      "interval": 1200,
      "description": "List authorized_keys for each user on the system"
    },
    "alf": {
      "query" : "select * from alf;",
      "interval" : "3600",
      "platform" : "darwin",
      "version" : "1.4.5",
      "description" : "Retrieves the configuration values for the Application Layer Firewall for OSX.",
      "value" : "Verify firewall settings are as restrictive as you need. Identify unwanted firewall holes made by malware or humans"
    },
    "alf_exceptions": {
      "query" : "select * from alf_exceptions;",
      "interval" : "3600",
      "platform" : "darwin",
      "version" : "1.4.5",
      "description" : "Retrieves the exceptions for the Application Layer Firewall in OSX.",
      "value" : "Verify firewall settings are as restrictive as you need. Identify unwanted firewall holes made by malware or humans"
    },
    "alf_services": {
      "query" : "select * from alf_services;",
      "interval" : "3600",
      "platform" : "darwin",
      "version" : "1.4.5",
      "description" : "Retrieves the services for the Application Layer Firewall in OSX.",
      "value" : "Verify firewall settings are as restrictive as you need. Identify unwanted firewall holes made by malware or humans"
    },
    "alf_explicit_auths": {
      "query" : "select * from alf_explicit_auths;",
      "interval" : "3600",
      "platform" : "darwin",
      "version" : "1.4.5",
      "description" : "Retrieves the list of processes with explicit authorization for the Application Layer Firewall.",
      "value" : "Verify firewall settings are as restrictive as you need. Identify unwanted firewall holes made by malware or humans"
    },
    "app_schemes": {
      "query" : "select * from app_schemes;",
      "interval" : "7200",
      "platform" : "darwin",
      "version" : "1.4.7",
      "description" : "Retrieves the list of application scheme/protocol-based IPC handlers.",
      "value" : "Post-priori hijack detection, detect potential sensitive information leakage."
    },
    "boot_efi_hash": {
      "query": "SELECT path, md5 FROM hash WHERE path='/System/Library/CoreServices/boot.efi';",
      "interval": 1200,
      "description": "MD5 hash of boot.efi"
    },
    "browser_plugins": {
      "query": "SELECT * FROM users CROSS JOIN browser_plugins USING (uid);",
      "interval": 1200,
      "description": "All C/NPAPI browser plugin details for all users."
    },
    "chrome_browser_history": {
      "query": "SELECT last_visited,url FROM chrome_browser_history;",
      "interval": 300,
      "description": "Get user's browser history"
    },
    "chrome_extensions": {
      "query": "SELECT * FROM users CROSS JOIN chrome_extensions USING (uid);",
      "interval": 1200,
      "description": "List installed Chrome Extensions for all users"
    },
    "chrome_extensions_snapshot": {
      "query": "SELECT * FROM users CROSS JOIN chrome_extensions USING (uid);",
      "interval": 1200,
      "description": "Snapshot query for Chrome extensions"
    },
    "chrome_login_keychain": {
      "query": "SELECT * FROM chrome_login_keychain;",
      "interval": 300,
      "description": "Snapshot query for Chrome extensions"
    },
    "crashes": {
      "query": "SELECT uid, datetime, responsible, exception_type, identifier, version, crash_path FROM users JOIN crashes USING (uid);",
      "interval": 1200,
      "description": "Application, System, and Mobile App crash logs.",
      "removed": false
    },
    "crontab": {
      "query": "SELECT * FROM crontab;",
      "interval": 1200,
      "description": "Line parsed values from system and user cron/tab."
    },
    "disk_encryption_snapshot": {
      "query": "SELECT * FROM disk_encryption;",
      "interval": 1200,
      "description": "Disk encryption status and information.",
      "snapshot": true
    },
    "disk_free_space_pct": {
      "query": "SELECT (blocks_available * 100 / blocks) AS pct FROM mounts WHERE device='/dev/disk1s1';",
      "interval": 1200,
      "description": "Displays the percentage of free space available on the primary disk partition",
      "snapshot": true
    },
    "efigy": {
      "query": "SELECT * FROM efigy;",
      "interval": 1200,
      "description": "Determine if the host is running the expected EFI firmware version given their Mac hardware and OS build version (https://github.com/duo-labs/EFIgy)",
      "snapshot": true
    },
    "emond": {
      "query": "SELECT * FROM file JOIN hash USING (path) WHERE (path LIKE '/etc/emond.d/%%' AND sha256!='f19f881084f599fa261243918d922373eab14623e78d23c41fcc031aa21ca7b6' AND sha256!='20909c75c14c9f5360a48c889d06a0d6cfbfa28080348940fc077761744f2aa5' AND sha256!='36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068'AND sha256!='2aafb4238cbdd40c66591c01798da942f62c7f06bb84c9328a40581fc22c4af8'AND sha256!='590192452963fdddc1990cd42c3bf77b3532b3e4a2c13e14e42c0d6a4c881ac4'AND sha256!='69f416293592c0a96733498788b79d6516ed1ad5327ac7cafd6d12e8b231519f'AND sha256!='') OR (path LIKE '/private/var/db/emondClients/%');",
      "interval": 1200,
      "description": "Query to monitor files for changes inside of /etc/emon.d/ or /private/var/db/emondClients/ which can be used for persistence: (https://www.xorrior.com/emond-persistence/)"
    },
    "emond_snapshot": {
      "query": "SELECT * FROM file JOIN hash USING (path) WHERE (path LIKE '/etc/emond.d/%%' AND sha256!='f19f881084f599fa261243918d922373eab14623e78d23c41fcc031aa21ca7b6' AND sha256!='20909c75c14c9f5360a48c889d06a0d6cfbfa28080348940fc077761744f2aa5' AND sha256!='36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068'AND sha256!='2aafb4238cbdd40c66591c01798da942f62c7f06bb84c9328a40581fc22c4af8'AND sha256!='590192452963fdddc1990cd42c3bf77b3532b3e4a2c13e14e42c0d6a4c881ac4'AND sha256!='69f416293592c0a96733498788b79d6516ed1ad5327ac7cafd6d12e8b231519f'AND sha256!='') OR (path LIKE '/private/var/db/emondClients/%');",
      "interval": 1200,
      "description": "Snapshot query to monitor files for changes inside of /etc/emon.d/ or /private/var/db/emondClients/ which can be used for persistence: (https://www.xorrior.com/emond-persistence/)",
      "snapshot": true
    },
    "etc_hosts": {
      "query": "SELECT * FROM etc_hosts;",
      "interval": 1200,
      "description": "List the contents of /etc/hosts"
    },
    "event_taps": {
      "query": "SELECT * FROM event_taps INNER JOIN processes ON event_taps.tapping_process = processes.pid WHERE event_tapped NOT LIKE '%mouse%' AND processes.path NOT IN ('/usr/libexec/airportd', '/usr/sbin/universalaccessd') AND processes.path NOT LIKE '/System/Library/%' AND processes.path NOT LIKE '%/steamapps/%' AND processes.path NOT LIKE '%.app%' AND event_taps.enabled=1;",
      "interval": 300,
      "description": "Returns information about installed event taps. Can be used to detect keyloggers"
    },
    "file_events": {
      "query": "SELECT * FROM file_events;",
      "interval": 300,
      "removed": false,
      "description": "Track time/action changes to files specified in configuration data."
    },
    "firefox_addons": {
      "query": "SELECT * FROM users CROSS JOIN firefox_addons USING (uid);",
      "interval": 1200,
      "description": "List installed Firefox addons for all users"
    },
    "hardware_events": {
      "query": "SELECT * FROM hardware_events;",
      "interval": 300,
      "description": "Hardware (PCI/USB/HID) events from UDEV or IOKit.",
      "removed": false
    },
    "homebrew_packages": {
      "query": "SELECT * FROM homebrew_packages;",
      "interval": 1200,
      "description": "The installed homebrew package database."
    },
    "homebrew_packages_snapshot": {
      "query": "SELECT name, version FROM homebrew_packages;",
      "interval": 1200,
      "description": "The installed homebrew package database.",
      "snapshot": true
    },
    "installed_applications": {
      "query": "SELECT * FROM apps;",
      "interval": 1200,
      "description": "OS X applications installed in known search paths (e.g., /Applications)."
    },
    "installed_applications_snapshot": {
      "query": "SELECT name, path, bundle_short_version, bundle_version, display_name FROM apps;",
      "interval": 1200,
      "description": "Snapshot query for installed_applications",
      "snapshot": true
    },
    "ip_forwarding_enabled": {
      "query": "SELECT * FROM system_controls WHERE name LIKE '%forwarding%' AND name LIKE '%ip%' AND current_value=1;",
      "interval": 1200,
      "description": "Discover hosts that have IP forwarding enabled",
      "removed": false
    },
    "known_hosts": {
      "query": "SELECT * FROM known_hosts LEFT JOIN users on known_hosts.uid = users.uid;",
      "interval": 1200,
      "description": "Public keys - useful to know who can login to a system and match against known keys",
      "removed": false
    },
    "last": {
      "query": "SELECT * FROM last;",
      "interval": 1200,
      "description": "System logins and logouts.",
      "removed": false
    },
    "launchd": {
      "query": "SELECT * FROM launchd;",
      "interval": 1200,
      "description": "LaunchAgents and LaunchDaemons from default search paths."
    },
    "launchd_snapshot": {
      "query": "SELECT path, name, label, program, run_at_load, program_arguments FROM launchd WHERE run_at_load=1;",
      "interval": 1200,
      "description": "Snapshot query for launchd",
      "snapshot": true
    },
    "ld_preload": {
      "query": "SELECT process_envs.pid, process_envs.key, process_envs.value, processes.name, processes.path, processes.cmdline, processes.cwd FROM process_envs join processes USING (pid) WHERE key = 'LD_PRELOAD';",
      "interval": 60,
      "description": "Detect the presence of the LD_PRELOAD environment variable",
      "removed": false
    },
    "listening_ports": {
      "query": "SELECT p.name, address, port, family, protocol, COALESCE(NULLIF(pos.path,''), p.path) AS path FROM listening_ports AS pos INNER JOIN processes AS p ON p.pid = pos.pid WHERE address <> \"\" AND port != 0 AND pos.pid > 0",
      "interval": 1200,
      "description": "List all the listening services"
    },
    "logged_in_users": {
      "query" : "select liu.*, p.name, p.cmdline, p.cwd, p.root from logged_in_users liu, processes p where liu.pid = p.pid;",
      "interval" : 3600,
      "platform": "posix",
      "version" : "1.4.5",
      "description" : "Retrieves the list of all the currently logged in users in the target system.",
      "value" : "Useful for intrusion detection and incident response. Verify assumptions of what accounts should be accessing what systems and identify machines accessed during a compromise."
    },
    "loginwindow1": {
      "query" : "select key, subkey, value from plist where path = '/Library/Preferences/com.apple.loginwindow.plist';",
      "interval": 1200,
      "platform" : "darwin",
      "version" : "1.4.5",
      "description" : "Retrieves all the values for the loginwindow process in the target OSX system.",
      "value" : "Identify malware that uses this persistence mechanism to launch at system boot"
    },
    "loginwindow2": {
      "query" : "select key, subkey, value from plist where path = '/Library/Preferences/loginwindow.plist';",
      "interval": 1200,
      "platform" : "darwin",
      "version" : "1.4.5",
      "description" : "Retrieves all the values for the loginwindow process in the target OSX system.",
      "value" : "Identify malware that uses this persistence mechanism to launch at system boot"
    },
    "loginwindow3": {
      "query" : "select username, key, subkey, value from plist p, (select * from users where directory like '/Users/%') u where p.path = u.directory || '/Library/Preferences/com.apple.loginwindow.plist';",
      "interval": 1200,
      "platform" : "darwin",
      "version" : "1.4.5",
      "description" : "Retrieves all the values for the loginwindow process in the target OSX system.",
      "value" : "Identify malware that uses this persistence mechanism to launch at system boot"
    },
    "loginwindow4": {
      "query" : "select username, key, subkey, value from plist p, (select * from users where directory like '/Users/%') u where p.path = u.directory || '/Library/Preferences/loginwindow.plist';",
      "interval": 1200,
      "platform" : "darwin",
      "version" : "1.4.5",
      "description" : "Retrieves all the values for the loginwindow process in the target OSX system.",
      "value" : "Identify malware that uses this persistence mechanism to launch at system boot"
    },
    "macosx_kextstat": {
      "query": "SELECT kernel_extensions.idx, kernel_extensions.refs, kernel_extensions.size, kernel_extensions.name, kernel_extensions.version, kernel_extensions.linked_against, kernel_extensions.path, signature.signed, signature.identifier, signature.cdhash, signature.team_identifier, signature.authority, hash.md5 FROM hash JOIN kernel_extensions ON hash.path LIKE printf('%s/Contents/MacOS/%', kernel_extensions.path) JOIN signature ON signature.path LIKE printf('%s/Contents/MacOS/%', kernel_extensions.path) WHERE signature.authority!='Software Signing';",
      "interval": 1200,
      "description": "List kernel extensions, their signing status, and their hashes (excluding extensions signed by Apple)"
    },
    "macosx_kextstat_snapshot": {
      "query": "SELECT kernel_extensions.name, kernel_extensions.version, kernel_extensions.path, signature.signed, signature.identifier, signature.cdhash, signature.team_identifier, signature.authority, hash.md5 FROM hash JOIN kernel_extensions ON hash.path LIKE printf('%s/Contents/MacOS/%', kernel_extensions.path) JOIN signature ON signature.path LIKE printf('%s/Contents/MacOS/%', kernel_extensions.path) WHERE signature.authority!='Software Signing';",
      "interval": 1200,
      "description": "Snapshot query for macosx_kextstat",
      "snapshot": true
    },
    "mounts": {
      "query": "SELECT device, device_alias, path, type, blocks_size FROM mounts;",
      "interval": 1200,
      "description": "System mounted devices and filesystems (not process specific).",
      "removed": false
    },
    "network_interfaces_snapshot": {
      "query": "SELECT a.interface, a.address, d.mac FROM interface_addresses a JOIN interface_details d USING (interface);",
      "interval": 600,
      "description": "Retrieve the interface name, IP address, and MAC address for all interfaces on the host.",
      "snapshot": true
    },
    "nfs_shares": {
      "query": "SELECT * FROM nfs_shares;",
      "interval": 1200,
      "description": "NFS shares exported by the host.",
      "removed": false
    },
    "nvram": {
      "query": "SELECT * FROM nvram;",
      "interval": 1200,
      "description": "Apple NVRAM variable listing.",
      "removed": false
    },
    "open_sockets": {
      "query" : "select distinct pid, family, protocol, local_address, local_port, remote_address, remote_port, path from process_open_sockets where path <> '' or remote_address <> '';",
      "interval": 1200,
      "platform": "posix",
      "version" : "1.4.5",
      "description" : "Retrieves all the open sockets per process in the target system.",
      "value" : "Identify malware via connections to known bad IP addresses as well as odd local or remote port bindings"
    },
    "open_files": {
      "query" : "select distinct pid, path from process_open_files where path not like '/private/var/folders%' and path not like '/System/Library/%' and path not in ('/dev/null', '/dev/urandom', '/dev/random');",
      "interval": 1200,
      "platform": "posix",
      "version" : "1.4.5",
      "description" : "Retrieves all the open files per process in the target system.",
      "value" : "Identify processes accessing sensitive files they shouldn't"
    },
    "os_version": {
      "query": "SELECT * FROM os_version;",
      "interval": 1200,
      "description": "List the version of the resident operating system"
    },
    "os_version_snapshot": {
      "query": "SELECT * FROM os_version;",
      "interval": 1200,
      "description": "Operating system version snapshot query",
      "snapshot": true
    },
    "osquery_info": {
      "query": "SELECT * FROM osquery_info;",
      "interval": 1200,
      "description": "Information about the resident osquery process",
      "snapshot": true
    },
    "platform_info": {
      "query": "SELECT * FROM platform_info;",
      "interval": 1200,
      "description": "Information about EFI/UEFI/ROM and platform/boot.",
      "removed": false
    },
    "platform_info_snapshot": {
      "query": "SELECT vendor, version, date, revision from platform_info;",
      "interval": 1200,
      "description": "Platform info snapshot query"
    },
    "process_env": {
      "query" : "select * from process_envs;",
      "interval": 1200,
      "platform": "posix",
      "version" : "1.4.5",
      "description" : "Retrieves all the environment variables per process in the target system.",
      "value" : "Insight into the process data: Where was it started from, was it preloaded..."
    },
    "process_events": {
      "query": "SELECT p.time, p.auid, p.cmdline, p.ctime, p.cwd, p.egid, p.euid, p.gid, p.parent, p.path, p.pid, u.username, h.sha256, p.uid FROM process_events as p INNER JOIN hash AS h ON h.path = p.path INNER JOIN users AS u ON u.uid = p.uid;",
      "interval": 60,
      "description": "Track newly created processes."
    },
    "python_packages": {
      "query": "SELECT * FROM python_packages;",
      "interval": 1200,
      "description": "Python packages installed in a system."
    },
    "rc.common": {
      "query": "SELECT * FROM hash WHERE path='/etc/rc.common' AND md5!='28ce428faefe6168618867f3ff5527f9' and md5!='';",
      "interval": 1200,
      "description": "Checks the MD5 hash of /etc/rc.common and records the results if the hash differs from the default value. /etc/rc.common can be used for persistence."
    },
    "rc.common_snapshot": {
      "query": "SELECT * FROM hash WHERE path='/etc/rc.common' AND md5!='28ce428faefe6168618867f3ff5527f9' and md5!='';",
      "interval": 1200,
      "description": "Checks the MD5 hash of /etc/rc.common and records the results if the hash differs from the default value. /etc/rc.common can be used for persistence.",
      "snapshot": true
    },
    "quarantine_items": {
      "query": "SELECT agent_name, origin_url, data_url FROM quarantine_items;",
      "interval": 300,
      "description": "Query the downloaded quarantined files"
    },
    "recent_items": {
      "query" : "select username, key, value from plist p, (select * from users where directory like '/Users/%') u where p.path = u.directory || '/Library/Preferences/com.apple.recentitems.plist';",
      "interval": 1200,
      "platform" : "darwin",
      "version" : "1.4.5",
      "description" : "Retrieves the list of recent items opened in OSX by parsing the plist per user.",
      "value" : "Identify recently accessed items. Useful for compromised hosts."
    },
    "safari_browser_history": {
      "query": "SELECT * FROM safari_browser_history;",
      "interval": 300,
      "description": "Query the Safari browser history"
    },
    "sandboxes": {
      "query" : "select * from sandboxes;",
      "interval" : "7200",
      "platform" : "darwin",
      "version" : "1.4.7",
      "description" : "Lists the application bundle that owns a sandbox label.",
      "value" : "Post-priori hijack detection, detect potential sensitive information leakage." 
    }, 
    "safari_extensions": {
      "query": "SELECT * FROM users CROSS JOIN safari_extensions USING (uid);",
      "interval": 1200,
      "description": "Safari browser extension details for all users."
    },
    "shell_history": {
      "query" : "select * from users join shell_history using (uid);",
      "interval": 1200,
      "platform": "posix",
      "version" : "1.4.5",
      "description" : "Retrieves the command history, per user, by parsing the shell history files.",
      "value" : "Identify actions taken. Useful for compromised hosts."
    },
    "sip_config": {
      "query": "SELECT * FROM sip_config;",
      "interval": 1200,
      "description": "Apple's System Integrity Protection (rootless) status."
    },
    "startup_items": {
      "query": "SELECT * FROM startup_items;",
      "interval": 1200,
      "description": "Applications and binaries set as user/login startup items."
    },
    "socket_events": {
      "query": "SELECT pid, remote_address AS address, remote_port AS port, family, path, time AS timestamp FROM socket_events WHERE remote_address <> \"\" AND remote_port != 0 AND pid > 0;",
      "interval": 60,
      "description": "Track newly created sockets"
    },
    "suid_bin": {
      "query": "SELECT * FROM suid_bin;",
      "interval": 1200,
      "description": "suid binaries in common locations.",
      "removed": false
    },
    "tcc_system_entries": {
      "query": "select * from tcc_system_entries;",
      "interval": 30,
      "description": "current time healthcheck"
    },
    "tcc_user_entries": {
      "query": "select * from tcc_user_entries;",
      "interval": 30,
      "description": "current time healthcheck"
    },
    "time": {
      "query": "select unix_time from time;",
      "interval": 30,
      "description": "current time healthcheck"
    },
    "uptime": {
      "query": "SELECT * FROM uptime;",
      "interval": 1800,
      "description": "System uptime",
      "snapshot": true
    },
    "usb_devices": {
      "query": "SELECT * FROM usb_devices;",
      "interval": 300,
      "description": "USB devices that are actively plugged into the host system."
    },
    "user_events": {
      "query": "SELECT * FROM user_events;",
      "interval": 60,
      "description": "Returns user events from the audit framework.",
      "removed": false
    },
    "user_ssh_keys": {
      "query": "SELECT * FROM users JOIN user_ssh_keys USING (uid);",
      "interval": 1200,
      "description": "Returns the private keys in the users ~/.ssh directory and whether or not they are encrypted.",
      "removed": false
    },
    "users": {
      "query": "SELECT * FROM users;",
      "interval": 1200,
      "description": "Local system users."
    },
    "users_snapshot": {
      "query": "SELECT * FROM users;",
      "interval": 1200,
      "description": "Local system users."
    },
    "wifi_status_snapshot": {
      "query": "SELECT * FROM wifi_status;",
      "interval": 1200,
      "description": "Shows information about the wifi network that a host is currently connected to.",
      "snapshot": true
    },
    "wireless_networks": {
      "query": "SELECT ssid, network_name, security_type, last_connected, captive_portal, possibly_hidden, roaming, roaming_profile FROM wifi_networks;",
      "interval": 1200,
      "description": "OS X known/remembered Wi-Fi networks list.",
      "removed": false
    },
    "macos_system_logs": {
      "query" : "SELECT time, message FROM asl WHERE facility = 'authpriv' AND sender = 'sudo' AND message LIKE '%python%';",
      "interval" : 300,
      "platform": "darwin",
      "description" : "MacOS System Logs.",
      "value" : "Review MacOS System Logs"
    }
  },
  "decorators": {
    "load": [
      "SELECT version FROM osquery_info;",
      "SELECT uuid AS host_uuid FROM system_info;"
    ],
    "always": [
      "SELECT user AS username FROM logged_in_users WHERE user <> '' ORDER BY time LIMIT 1;"
    ],
    "interval": {
      "3600": [
        "SELECT total_seconds AS uptime FROM uptime;"
      ]
    }
  },
  "auto_table_construction" : {
    "quarantine_items" : {
      "query" : "SELECT LSQuarantineEventIdentifier as id, LSQuarantineAgentName as agent_name, LSQuarantineAgentBundleIdentifier as agent_bundle_identifier, LSQuarantineTypeNumber as type, LSQuarantineDataURLString as data_url,LSQuarantineOriginURLString as origin_url, LSQuarantineSenderName as sender_name, LSQuarantineSenderAddress as sender_address, LSQuarantineTimeStamp as timestamp from LSQuarantineEvent",
      "path" : "/Users/%/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2",
      "columns" : ["id", "type", "agent_name", "agent_bundle_identifier", "timestamp", "sender_name", "sender_address", "origin_url", "data_url"]
    },
    "chrome_browser_history" : {
      "query" : "SELECT urls.id id, urls.url url, urls.title title, urls.visit_count visit_count, urls.typed_count typed_count, urls.last_visit_time last_visit_time, urls.hidden hidden, visits.visit_time visit_time, visits.from_visit from_visit, visits.visit_duration visit_duration, visits.transition transition, visit_source.source source FROM urls JOIN visits ON urls.id = visits.url LEFT JOIN visit_source ON visits.id = visit_source.id",
      "path" : "/Users/%/Library/Application Support/Google/Chrome/%/History",
      "columns" : ["path", "id", "url", "title", "visit_count", "typed_count", "last_visit_time", "hidden", "visit_time", "visit_duration", "source"],
      "platform" : "darwin"
    },
    "chrome_login_keychain" : {
      "query" : "SELECT origin_url, action_url, username_value, password_element FROM logins",
      "path" : "/Users/%/Library/Application Support/Google/Chrome/Default/Login Data",
      "columns" : ["origin_url", "action_url", "username_value", "password_element"],
      "platform" : "darwin"
    },
    "tcc_system_entries": {
      "query": "SELECT service, client, allowed, prompt_count, last_modified FROM access;",
      "path": "/Library/Application Support/com.apple.TCC/TCC.db",
      "columns": [
        "service",
        "client",
        "allowed",
        "prompt_count",
        "last_modified"
      ],
      "platform": "darwin"
    },
    "safari_browser_history" : {
      "query" : "SELECT visit_time, title, url FROM history_visits INNER JOIN history_items ON history_items.id = history_visits.history_item;",
      "path" : "/Users/%/Library/Safari/History.db",
      "columns" : ["visit_time", "title", "url"],
      "platform" : "darwin"
    },
    "tcc_user_entries": {
      "query": "SELECT service, client, allowed, prompt_count, last_modified FROM access;",
      "path": "/Users/%/Library/Application Support/com.apple.TCC/TCC.db",
      "columns": [
        "service",
        "client",
        "allowed",
        "prompt_count",
        "last_modified"
      ],
      "platform": "darwin"
    }
  },
  "packs": {
    "osx-attacks": "/var/osquery/packs/osx-attacks.conf",
    "unwanted-chrome-extensions": "/var/osquery/packs/unwanted-chrome-extensions.conf",
    "incident-response": "/var/osquery/packs/incident-response.conf",
    "ossec-rootkit": "/var/osquery/packs/ossec-rootkit.conf"
  },
  "file_paths": {
    "etc": [
      "/etc/%%"
    ],
    "homes": [
      "/Users/%%",
      "/var/root/%%"
    ],
    "tmp": [
      "/tmp/%%"
    ],
    "binaries": [
      "/usr/bin/%%",
      "/usr/sbin/%%",
      "/bin/%%",
      "/sbin/%%",
      "/usr/local/bin/%%",
      "/usr/local/sbin/%%",
      "/opt/bin/%%",
      "/opt/sbin/%%"
    ],
    "efi": [
      "/System/Library/CoreServices/boot.efi"
    ]
  }
}