####################################################################
# Install/Setup Logstash
####################################################################
- name: Add Elastic GPG key
  apt_key:
    url: "{{ elastic_gpg_url }}"
    state: present

- name: Add Elastic repo
  apt_repository:
    repo: "{{ elastic_repo_url }}"
    state: present

- name: Install Logstash
  apt:
    name: 'logstash=1:{{ elastic_version }}-1'
    state: present

####################################################################
# Generate TLS private key and cert
####################################################################
- name: Check if Logstash public certificate exists
  stat:
    path: /etc/logstash/tls/logstash.crt
  register: logstash_public_cert

- name: Create Logstash TLS directory
  file:
    path: '/etc/logstash/tls'
    state: directory
    owner: logstash
    group: logstash
  when: logstash_public_cert.stat.exists == False
    
- name: Generate an OpenSSL private key for Logstash
  openssl_privatekey:
    path: /etc/logstash/tls/logstash.key
    size: 4096
    type: RSA
    format: 'pkcs8'
    owner: logstash
    group: logstash
  when: logstash_public_cert.stat.exists == False

- name: Generate an OpenSSL Certificate Signing Request with Subject information for Logstash
  openssl_csr:
    path: /etc/logstash/tls/logstash.csr
    privatekey_path: /etc/logstash/tls/logstash.key
    country_name: "US"
    organization_name: "{{ base_domain }}"
    email_address: "admin@{{ base_domain }}"
    common_name: "logstash.{{ base_domain }}"
  when: logstash_public_cert.stat.exists == False

- name: Generate a Self Signed OpenSSL certificate for Logstash
  openssl_certificate:
    path: /etc/logstash/tls/logstash.crt
    privatekey_path: /etc/logstash/tls/logstash.key
    csr_path: /etc/logstash/tls/logstash.csr
    provider: selfsigned
    owner: logstash
    group: logstash
  when: logstash_public_cert.stat.exists == False

####################################################################
# Copy Logstash pipeline
####################################################################
- name: Copy Logstash input config
  template:
    src: "conf/logstash_ingestor/logstash/02-input-beats.conf"
    dest: "/etc/logstash/conf.d/02-input-beats.conf"
    owner: logstash
    group: logstash
    mode: 0400

# - name: Copy Logstash filters
#   template:
#     src: "{{ item }}"
#     dest: "/etc/logstash/conf.d/{{ item | basename }}"
#     owner: logstash
#     group: logstash
#     mode: 0400
#   with_fileglob:
#     - conf/logstash_filters/*.conf

- name: Copy Kafka output config
  template:
    src: "conf/logstash_ingestor/logstash/30-output-kafka.conf"
    dest: "/etc/logstash/conf.d/30-output-kafka.conf"
    owner: logstash
    group: logstash
    mode: 0400

- name: Copy file output config
  template:
    src: "conf/logstash_ingestor/logstash/32-file-output.conf"
    dest: "/etc/logstash/conf.d/32-file-output.conf"
    owner: logstash
    group: logstash
    mode: 0400

####################################################################
# Restart service
####################################################################
- name: Restart Logstash
  service:
    name: logstash
    enabled: yes
    state: restarted

- name: Logstash healthcheck
  uri:
    url: "http://127.0.0.1:9600"
    follow_redirects: none
    method: GET
    remote_src: yes
    status_code: 200
  register: _result
  until: _result.status == 200
  retries: 720 # 720 * 5 seconds = 1hour (60*60/5)
  delay: 5 # Every 5 seconds

- name: Logstash BEATs healthcheck
  wait_for:
    port: 5044
    delay: 10